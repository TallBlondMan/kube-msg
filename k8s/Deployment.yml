apiVersion: v1
kind: Namespace
metadata:
  name: message-application
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: message-application
  labels:
    app: km-message
spec:
  selector:
    matchLabels:
      name: frontend
      app: km-message
  template:
    metadata:
      labels:
        name: frontend
        app: km-message
    spec:
      containers:
      - name: frontend
        image: tallblondman/km-front:v1.1.0
        imagePullPolicy: Always
        env:
        - name: API_HOST
          value: 'backend-service'
        - name: API_PORT
          value: '3000'
        resources:
          limits:
            memory: "200Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: message-application
  labels:
    app: km-message
spec:
  selector:
    name: frontend
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: database-login
  namespace: message-application
  labels:
    app: km-message
type: Opaque
data:
  PG_DATABASE: dHJ1bms=
  PG_PASSWORD: cGFzczE=
  PG_USER: YWRtaW4=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: message-application
  labels:
    app: km-message
spec:
  selector:
    matchLabels:
      app: km-message
      name: backend
  template:
    metadata:
      labels:
        name: backend
        app: km-message
    spec:
      containers:
      - name: backend
        image: tallblondman/km-back:v1.1.0
        imagePullPolicy: Always
        env:
        - name: PG_HOST
          value: 'database-service'
        - name: PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: database-login
              key: PG_DATABASE
        - name: PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-login
              key: PG_PASSWORD
        - name: PG_USER
          valueFrom:
            secretKeyRef:
              name: database-login
              key: PG_USER
        resources:
          limits:
            memory: "200Mi"
            cpu: "500m"
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: message-application
  labels:
    app: km-message
spec:
  selector:
    name: backend
    app: km-message
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database
  namespace: message-application
  labels:
   app: km-message
spec:
  selector:
    matchLabels:
      name: database
      app: km-message
  replicas: 1
  serviceName: "database"
  template:
    metadata:
      labels:
        name: database
        app: km-message
    spec:
      containers:
      - name: database
        image: postgres
        readinessProbe:
          exec:
            command:
            - sh 
            - '-c'
            - pg_isready
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
        - name: PGDATA
          value: '/var/lib/postgresql/data/pgdata'
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-login
              key: PG_PASSWORD
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-login
              key: PG_USER
        ports:
        - containerPort: 5432
          name: db-port
        volumeMounts:
        - name: db-data
          mountPath: /usr/share/nginx/html
        - name: init-db
          readOnly: true
          mountPath: /docker-entrypoint-initdb.d
        resources:
          limits:
            memory: "200Mi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: db-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 300Mi
  volumes:
  - name: init-db
    configMap:
      name: database-init-sql
---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: message-application
  labels:
    app: km-message
spec:
  clusterIP: None
  selector:
    name: database
    app: km-message
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432


# TODO
# - Create initContainer for backend to check if database ready
# - Put on HELM